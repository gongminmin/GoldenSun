find_program(git_executable NAMES git git.exe git.cmd)
if(NOT git_executable)
    message(FATAL_ERROR "Failed to find git.")
endif()

macro(CloneExternalLib name url branch shallow_exclude)
    if(EXISTS ${external_lib_folder})
        message(STATUS "Removing ${external_lib_folder}...")
        file(REMOVE_RECURSE ${external_lib_folder})
    endif()

    message(STATUS "Cloning ${name}...")
    if(NOT ("x${branch}" STREQUAL "x"))
        set(branch_param "-b")
        set(branch_name_param "${branch}")
    else()
        set(branch_param "")
        set(branch_name_param "")
    endif()
    if(NOT ("x${shallow_exclude}" STREQUAL "x"))
        set(shallow_exclude_param "--shallow-exclude=${shallow_exclude}")
    else()
        set(shallow_exclude_param "")
    endif()
    execute_process(COMMAND "${git_executable}" "clone" ${url} ${branch_param} ${branch_name_param} ${shallow_exclude_param} "${name}" "-n" "-q" WORKING_DIRECTORY "${external_folder}")
endmacro()

macro(CheckoutExternalLib name rev)
    message(STATUS "Checking out to revision ${rev}...")
    execute_process(COMMAND "${git_executable}" "checkout" "-q" ${rev} WORKING_DIRECTORY "${external_lib_folder}" RESULT_VARIABLE checkout_err)
    if(NOT checkout_err)
        message(STATUS "Creating a staging branch...")
        execute_process(COMMAND "${git_executable}" "branch" "-f" "GOLDEN_SUN_STAGING" WORKING_DIRECTORY "${external_lib_folder}" RESULT_VARIABLE checkout_err)
    endif()
    set(${ARGV2} ${checkout_err} PARENT_SCOPE)
endmacro()

function(UpdateExternalLib name url rev)
    set(external_folder "${CMAKE_CURRENT_SOURCE_DIR}")
    set(external_lib_folder "${external_folder}/${name}")

    if(EXISTS "${external_lib_folder}/.git")
        message(STATUS "Checking staging branch...")
        execute_process(COMMAND "${git_executable}" "rev-parse" "GOLDEN_SUN_STAGING" "-q" WORKING_DIRECTORY "${external_lib_folder}" OUTPUT_VARIABLE staging_rev)
        string(STRIP ${staging_rev} staging_rev)

        if("${staging_rev}" STREQUAL "${rev}")
            set(need_checkout FALSE)
        else()
            message(STATUS "Fetching ${name}...")
            execute_process(COMMAND "${git_executable}" "fetch" "origin" WORKING_DIRECTORY "${external_lib_folder}")
            set(need_checkout TRUE)
        endif()
    else()
        CloneExternalLib(${name} ${url} "${ARGV3}" "${ARGV4}")
        set(need_checkout TRUE)
    endif()

    if(need_checkout)
        CheckoutExternalLib(${name} ${rev} checkout_err)
        if(checkout_err)
            message(STATUS "COULD NOT checkout revision ${rev}, reclone the repository.")
            CloneExternalLib(${name} ${url} "${ARGV3}" "${ARGV4}")

            CheckoutExternalLib(${name} ${rev})
        endif()
    endif()

    set(${ARGV3} ${need_checkout} PARENT_SCOPE)
endfunction()

include(assimp.cmake)
include(googletest.cmake)
include(stb.cmake)
